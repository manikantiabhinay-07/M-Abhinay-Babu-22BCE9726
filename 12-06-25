12th June 2025 CLASSWORK

COMMANDS USED FOR SETTING PRIMARY AND 2 SECONDARY REPLICAS:
mongod --replSet rs0 --port 27018 --dbpath C:\data\db0 --bind_ip localhost    #PRIMARY REPLICA
mongod --replSet rs0 --port 27018 --dbpath C:\data\db1 --bind_ip localhost    #SECONDARY REPLICA
mongod --replSet rs0 --port 27019 --dbpath C:\data\db2 --bind_ip localhost    #SECONDARY REPLICA

FOR CONNENCTION:
mongosh --port 27017


Port	|  DBFolder  |	   Role
______|____________|____________
27017	|   db0	     |  Primary
27018 |   db1	     |  Secondary
27019	|   db2	     |  Secondary

############# WORKING ##################

rs0 [direct: primary] test> rs.add("localhost:27018")
{
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1749740548, i: 1 }),
    signature: {
      hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),
      keyId: Long('0')
    }
  },
  operationTime: Timestamp({ t: 1749740548, i: 1 })
}
rs0 [direct: primary] test> rs.add("localhost:27019")
{
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1749740567, i: 1 }),
    signature: {
      hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),
      keyId: Long('0')
    }
  },
  operationTime: Timestamp({ t: 1749740567, i: 1 })
}
rs0 [direct: primary] test> rs.status()
{
  set: 'rs0',
  date: ISODate('2025-06-12T15:03:15.432Z'),
  myState: 1,
  term: Long('1'),
  syncSourceHost: '',
  syncSourceId: -1,
  heartbeatIntervalMillis: Long('2000'),
  majorityVoteCount: 2,
  writeMajorityCount: 2,
  votingMembersCount: 3,
  writableVotingMembersCount: 3,
  optimes: {
    lastCommittedOpTime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
    lastCommittedWallTime: ISODate('2025-06-12T15:03:09.406Z'),
    readConcernMajorityOpTime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
    appliedOpTime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
    durableOpTime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
    writtenOpTime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
    lastAppliedWallTime: ISODate('2025-06-12T15:03:09.406Z'),
    lastDurableWallTime: ISODate('2025-06-12T15:03:09.406Z'),
    lastWrittenWallTime: ISODate('2025-06-12T15:03:09.406Z')
  },
  lastStableRecoveryTimestamp: Timestamp({ t: 1749740567, i: 1 }),
  electionCandidateMetrics: {
    lastElectionReason: 'electionTimeout',
    lastElectionDate: ISODate('2025-06-12T14:55:48.854Z'),
    electionTerm: Long('1'),
    lastCommittedOpTimeAtElection: { ts: Timestamp({ t: 1749740148, i: 1 }), t: Long('-1') },
    lastSeenWrittenOpTimeAtElection: { ts: Timestamp({ t: 1749740148, i: 1 }), t: Long('-1') },
    lastSeenOpTimeAtElection: { ts: Timestamp({ t: 1749740148, i: 1 }), t: Long('-1') },
    numVotesNeeded: 1,
    priorityAtElection: 1,
    electionTimeoutMillis: Long('10000'),
    newTermStartDate: ISODate('2025-06-12T14:55:48.956Z'),
    wMajorityWriteAvailabilityDate: ISODate('2025-06-12T14:55:49.037Z')
  },
  members: [
    {
      _id: 0,
      name: 'localhost:27017',
      health: 1,
      state: 1,
      stateStr: 'PRIMARY',
      uptime: 701,
      optime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeDate: ISODate('2025-06-12T15:03:09.000Z'),
      optimeWritten: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeWrittenDate: ISODate('2025-06-12T15:03:09.000Z'),
      lastAppliedWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastDurableWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastWrittenWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      syncSourceHost: '',
      syncSourceId: -1,
      infoMessage: '',
      electionTime: Timestamp({ t: 1749740148, i: 2 }),
      electionDate: ISODate('2025-06-12T14:55:48.000Z'),
      configVersion: 5,
      configTerm: 1,
      self: true,
      lastHeartbeatMessage: ''
    },
    {
      _id: 1,
      name: 'localhost:27018',
      health: 1,
      state: 2,
      stateStr: 'SECONDARY',
      uptime: 47,
      optime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeDurable: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeWritten: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeDate: ISODate('2025-06-12T15:03:09.000Z'),
      optimeDurableDate: ISODate('2025-06-12T15:03:09.000Z'),
      optimeWrittenDate: ISODate('2025-06-12T15:03:09.000Z'),
      lastAppliedWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastDurableWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastWrittenWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastHeartbeat: ISODate('2025-06-12T15:03:13.499Z'),
      lastHeartbeatRecv: ISODate('2025-06-12T15:03:15.391Z'),
      pingMs: Long('0'),
      lastHeartbeatMessage: '',
      syncSourceHost: 'localhost:27017',
      syncSourceId: 0,
      infoMessage: '',
      configVersion: 5,
      configTerm: 1
    },
    {
      _id: 2,
      name: 'localhost:27019',
      health: 1,
      state: 2,
      stateStr: 'SECONDARY',
      uptime: 28,
      optime: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeDurable: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeWritten: { ts: Timestamp({ t: 1749740589, i: 1 }), t: Long('1') },
      optimeDate: ISODate('2025-06-12T15:03:09.000Z'),
      optimeDurableDate: ISODate('2025-06-12T15:03:09.000Z'),
      optimeWrittenDate: ISODate('2025-06-12T15:03:09.000Z'),
      lastAppliedWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastDurableWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastWrittenWallTime: ISODate('2025-06-12T15:03:09.406Z'),
      lastHeartbeat: ISODate('2025-06-12T15:03:13.486Z'),
      lastHeartbeatRecv: ISODate('2025-06-12T15:03:13.886Z'),
      pingMs: Long('0'),
      lastHeartbeatMessage: '',
      syncSourceHost: 'localhost:27018',
      syncSourceId: 1,
      infoMessage: '',
      configVersion: 5,
      configTerm: 1
    }
  ],
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1749740589, i: 1 }),
    signature: {
      hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),
      keyId: Long('0')
    }
  },
  operationTime: Timestamp({ t: 1749740589, i: 1 })
}


Sequence that I Followed:

1. Setup Scripts
1.1 start_replicas.bat (Windows batch file to start replica set members)

@echo off
REM Create data directories
mkdir C:\data\db0 2>nul
mkdir C:\data\db1 2>nul
mkdir C:\data\db2 2>nul

REM Start replica set members in separate windows
start "MongoDB Primary" mongod --replSet rs0 --port 27017 --dbpath C:\data\db0 --bind_ip localhost
start "MongoDB Secondary 1" mongod --replSet rs0 --port 27018 --dbpath C:\data\db1 --bind_ip localhost
start "MongoDB Secondary 2" mongod --replSet rs0 --port 27019 --dbpath C:\data\db2 --bind_ip localhost

echo Replica set members started. Waiting 10 seconds for initialization...
timeout /t 10 >nul

1.2 init_replica_set.js (Initialization script)

// Initialize replica set configuration
const config = {
    _id: "rs0",
    members: [
        { _id: 0, host: "localhost:27017", priority: 2 },
        { _id: 1, host: "localhost:27018" },
        { _id: 2, host: "localhost:27019" }
    ]
};

// Initiate replica set
rs.initiate(config);

// Check status (wait for election)
sleep(5000);
print("Replica Set Status:");
rs.status();

1.3 setup_replica.bat (Main setup script)

@echo off
call start_replicas.bat
echo Initializing replica set...
mongosh --port 27017 --quiet init_replica_set.js
echo Setup complete! Connect to primary using: mongosh --port 27017
pause


2. Verification Scripts
2.1 check_status.js (Verify replica set status)

const status = rs.status();
const members = status.members;

print("Replica Set Members:");
members.forEach(member => {
    print(`- ${member.name} (${member.stateStr})`);
});

// Verify write concern
assert(db.getMongo().setReadPref('primary'));
const testDoc = { _id: new ObjectId(), timestamp: new Date() };
db.test.insertOne(testDoc);
print("Write operation successful on primary");

// Verify replication
assert(db.getMongo().setReadPref('secondary'));
const docs = db.test.find().toArray();
print(`Secondary read successful. Documents count: ${docs.length}`);
2.2 test_replication.js (Test data replication)

// Insert test data
for (let i = 1; i <= 100; i++) {
    db.test.insertOne({ 
        number: i,
        message: `Document ${i}`,
        created: new Date()
    });
}
print("Inserted 100 test documents");

// Verify replication to secondaries
sleep(3000);
const secondaries = rs.status().members.filter(m => m.stateStr === 'SECONDARY');

secondaries.forEach(secondary => {
    const conn = new Mongo(secondary.name);
    const secondaryDB = conn.getDB("test");
    const count = secondaryDB.test.countDocuments();
    print(`Documents on ${secondary.name}: ${count}`);
    assert.eq(count, 100, "Document count mismatch on secondary");
});


3. Maintenance Scripts
3.1 force_primary.js (Force specific member as primary)

const targetMember = rs.status().members.find(m => m.name === "localhost:27017");

cfg = rs.conf();
cfg.members.forEach(member => {
    member.priority = (member._id === targetMember._id) ? 2 : 1;
});

rs.reconfig(cfg, {force: true});
print(`Reconfigured. ${targetMember.name} should be primary`);
3.2 simulate_failure.js (Simulate primary failure)

// Find current primary
const primary = rs.status().members.find(m => m.stateStr === 'PRIMARY');

print(`Stopping primary: ${primary.name}`);
db.adminCommand({shutdown: 1, force: true});

// Wait for failover
sleep(10000);
const newPrimary = rs.status().members.find(m => m.stateStr === 'PRIMARY');
print(`New primary elected: ${newPrimary.name}`);
